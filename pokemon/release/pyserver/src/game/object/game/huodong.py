#!/usr/bin/python# -*- coding: utf-8 -*-'''Copyright (c) 2014 YouMi Information Technology Inc.'''from __future__ import absolute_importfrom framework import nowdatetime_t, int2date, int2time, todaydate2int, date2int, in_period, period_runtime, period2date, OneDay, DayFullTimefrom framework.csv import csv, ErrDefsfrom framework.log import loggerfrom framework.object import ReloadHooker, ObjectDBase, db_property, ObjectNoGCDBasefrom game import ServerErrorfrom game.object import HuoDongDefsfrom game.session import Sessionimport datetimefrom collections import namedtuple## ObjectHuoDongBase#class ObjectHuoDongBase(object):	def __init__(self, cfg):		self._cfg = cfg	def init(self):		raise NotImplementedError()	@property	def id(self):		return self._cfg.id	@property	def name(self):		return self._cfg.name	@property	def openType(self):		return self._cfg.openType	@property	def openWeekDay(self):		return self._cfg.openWeekDay	@property	def openDuration(self):		return self._cfg.openDuration	@property	def _openDuration(self):		return datetime.timedelta(hours=self.openDuration)	@property	def beginDate(self):		return self._cfg.beginDate	@property	def _beginDate(self):		return int2date(self.beginDate)	@property	def beginTime(self):		return self._cfg.beginTime	@property	def _beginTime(self):		return int2time(self.beginTime)	@property	def beginDateTime(self):		return datetime.datetime.combine(int2date(self.beginDate), int2time(self.beginTime))	@property	def endDate(self):		return self._cfg.endDate	@property	def _endDate(self):		return int2date(self.endDate)	@property	def endTime(self):		return self._cfg.endTime	@property	def endDateTime(self):		return datetime.datetime.combine(int2date(self.endDate), int2time(self.endTime))	@property	def _endDelta(self):		return self.endDateTime - nowdatetime_t()	@property	def paramMap(self):		return self._cfg.paramMap	def isOpen(self):		'''		may be invalid		'''		raise NotImplementedError()	def nextDelta(self):		'''		open event		'''		raise NotImplementedError()	def eventDelta(self):		'''		open or close or invalid event		'''		raise NotImplementedError()	def isValid(self, now=None):		'''		may be no-open		'''		now = now or nowdatetime_t()		# return now >= self.beginDateTime and now < self.endDateTime		return now < self.endDateTime## ObjectHuoDongOnceBase#class ObjectHuoDongOnceBase(ObjectHuoDongBase):	def init(self):		self._beginDateTime = self.beginDateTime		self._endDateTime = min(self.beginDateTime + self._openDuration, self.endDateTime)	def isOpen(self, now=None):		now = now or nowdatetime_t()		return now >= self._beginDateTime and now < self._endDateTime	def isValid(self, now=None):		now = now or nowdatetime_t()		return now < self._endDateTime	def nextDelta(self, now=None):		now = now or nowdatetime_t()		if self.isValid(now):			return self._beginDateTime - now		return None	def eventDelta(self, now=None):		now = now or nowdatetime_t()		if not self.isValid(now):			return None		ret = None		if self.isOpen(now):			ret = self._endDateTime - now		else:			ret = self.nextDelta(now)		if ret.total_seconds() <= 0:			return None		return ret## ObjectHuoDongDailyBase#class ObjectHuoDongDailyBase(ObjectHuoDongBase):	'''	[beginTime, beginTime + openDuration]	'''	def init(self):		pass	def isOpen(self, now=None):		now = now or nowdatetime_t()		return in_period(self._beginTime, self._openDuration, now)	def nextDelta(self, now=None):		now = now or nowdatetime_t()		if now < self.beginDateTime:			return self.beginDateTime - now		if now.time() >= self._beginTime:			return datetime.datetime.combine(now.date(), self._beginTime) + OneDay - now		return datetime.datetime.combine(now.date(), self._beginTime) - now	def eventDelta(self, now=None):		now = now or nowdatetime_t()		ret = None		if self.isOpen(now):			ret = self._openDuration - period_runtime(self._beginTime, self._openDuration, now)		else:			ret = self.nextDelta(now)		ret = min(ret, self._endDelta)		if ret.total_seconds() <= 0:			return None		return ret## ObjectHuoDongWeekBase#class ObjectHuoDongWeekBase(ObjectHuoDongBase):	def init(self):		self._openWeekDay = list(self.openWeekDay)		self._openWeekDay.sort()	def isOpen(self, now=None):		now = now or nowdatetime_t()		nowdt = period2date(self._beginTime, now)		# 获取比今天小的，加上上周的		dts = [self._openWeekDay[-1]] + filter(lambda t: nowdt.isoweekday() >= t, self._openWeekDay)		# 就是今天		if nowdt.isoweekday() == dts[-1]:			todayStart = datetime.datetime.combine(nowdt, self._beginTime)			return todayStart <= now < todayStart + self._openDuration		# 判断是否之前开启的		oldday = nowdt - OneDay * ((7 + nowdt.isoweekday() - dts[-1]) % 7)		olddayStart = datetime.datetime.combine(oldday, self._beginTime)		return olddayStart <= now < olddayStart + self._openDuration	def nextDelta(self, now=None):		now = now or nowdatetime_t()		nowdt = period2date(self._beginTime, now)		# 获取比今天大的, 获取下周的		dts = filter(lambda t: nowdt.isoweekday() <= t, self._openWeekDay) + [self._openWeekDay[0]]		# 就是今天		if nowdt.isoweekday() == dts[0]:			todayStart = datetime.datetime.combine(nowdt, self._beginTime)			return todayStart + self._openDuration - now		# 下次打开活动		newday = nowdt + OneDay * ((7 + dts[0] - nowdt.isoweekday()) % 7)		newdayStart = datetime.datetime.combine(newday, self._beginTime)		return newdayStart - now	def eventDelta(self, now=None):		now = now or nowdatetime_t()		ret = None		if self.isOpen(now):			ret = self._openDuration - period_runtime(self._beginTime, self._openDuration, now)		else:			ret = self.nextDelta(now)		ret = min(ret, self._endDelta)		if ret.total_seconds() <= 0:			return None		return ret## ObjectHuoDong#class ObjectHuoDongDecorator(object):	'''	no variables, just function	'''	@property	def gateSeq(self):		return self._cfg.gateSeq	@property	def times(self):		return self._cfg.times	@property	def openLevel(self):		return self._cfg.openLevel	def getPeriodDateInt(self):		'''		相同时间，每个活动的dateint也可能不一样		因为每个的beginTime不同		'''		return date2int(period2date(self._beginTime))	def getGateID(self, difficulty):		if difficulty < 0 or difficulty >= len(self.gateSeq):			return None		return self.gateSeq[difficulty]## ObjectHuoDongOnce#class ObjectHuoDongOnce(ObjectHuoDongDecorator, ObjectHuoDongOnceBase):	pass## ObjectHuoDongDaily#class ObjectHuoDongDaily(ObjectHuoDongDecorator, ObjectHuoDongDailyBase):	pass## ObjectHuoDongWeek#class ObjectHuoDongWeek(ObjectHuoDongDecorator, ObjectHuoDongWeekBase):	def getPeriodDateInt(self):		dt = period2date(self._beginTime)		# 获取今天的		dts = filter(lambda t: dt.isoweekday() == t, self._openWeekDay)		if len(dts) == 0:			# 今天没有活动，就构造前一天的dateint			# week如果有间隔的话，反正存到前一天，不影响当天数据			return date2int(period2date(DayFullTime))		return date2int(dt)## ObjectHuoDongFactory#class ObjectHuoDongFactory(ReloadHooker):	HuoDongMap = {}	OpenMap = {}   #1:已开启 0:在大的活动时间内不满足条件	@classmethod	def classInit(cls):		# print ObjectHuoDongWeek.mro()		cls.HuoDongMap = {}		cls.OpenMap = {}		for idx in csv.huodong:			cfg = csv.huodong[idx]			if cfg.openType == HuoDongDefs.OnceOpen:				obj = ObjectHuoDongOnce(cfg)			if cfg.openType == HuoDongDefs.DailyOpen:				obj = ObjectHuoDongDaily(cfg)			elif cfg.openType == HuoDongDefs.WeekOpen:				obj = ObjectHuoDongWeek(cfg)			obj.init()			if obj.isValid():				cls.HuoDongMap[cfg.id] = obj		Session.onHuoDongRefresh()	@classmethod	def getConfig(cls, id):		return cls.HuoDongMap.get(id, None)	@classmethod	def getOpenConfig(cls, id):		if id not in cls.OpenMap:			return None		return cls.HuoDongMap.get(id, None)	@classmethod	def isOpen(cls, id):		return id in cls.OpenMap	@classmethod	def getOpenMap(cls):		return cls.OpenMap	@classmethod	def refreshAndEventDelta(cls):		'''		由session按delta主动更新		'''		ret = None		now = nowdatetime_t()		oldMap = cls.HuoDongMap		cls.HuoDongMap = {}		cls.OpenMap = {}		for huodongID, obj in oldMap.iteritems():			if obj.isValid(now):				cls.HuoDongMap[huodongID] = obj				openFlag = obj.isOpen(now)				if openFlag:					cls.OpenMap[huodongID] = 1 # 1 open				else:					cls.OpenMap[huodongID] = 0 # 0 unopen				delta = obj.eventDelta(now)				logger.info('delta %d %s %s %s', huodongID, obj.name, openFlag, delta)				if delta is None:					continue				if ret is None:					ret = delta				elif ret > delta:					ret = delta		return ret